# -*- coding: utf-8 -*-
"""stock_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sR31R4vssUMKwuNVVekLApbSDdWJW8sD
"""

!pip install yfinance ta ipywidgets mplcursors vaderSentiment feedparser beautifulsoup4 gradio


import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import ta
import ipywidgets as widgets
from IPython.display import display
import mplcursors
from datetime import date, datetime, timedelta
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import feedparser
from bs4 import BeautifulSoup

analyzer = SentimentIntensityAnalyzer()

ai_companies = [
    "NVDA",
    "TSLA",
    "GOOGL",
    "MSFT",
    "META",
    "AMD",
    "INTC",
    "IBM",
    "CSCO",
    "ORCL",
    "AMZN",
    "SNPS",
    "CRM",
    "AVGO",
    "TXN",
    "QCOM",
    "NOW",
    "PANW",
    "PLTR"
]

start_date = "2023-01-01"
end_date = pd.Timestamp.today().strftime('%Y-%m-%d')

stock_data = pd.DataFrame()
for company in ai_companies:
    temp_data = yf.download(company, start=start_date, end=end_date, auto_adjust=False)
    temp_data['Company'] = company
    stock_data = pd.concat([stock_data, temp_data])

stock_data.reset_index(inplace=True)
stock_data['Date'] = pd.to_datetime(stock_data['Date'])

pivot_data = stock_data.pivot_table(values='Close', index='Date', columns='Company')

sma_period = 50
ema_period = 20
rsi_period = 14
atr_period = 14

atr_pivot = pd.DataFrame(index=pivot_data.index)

for company in ai_companies:
    if company in pivot_data.columns:
        close_prices = pivot_data[company].squeeze()

        pivot_data[f'{company}_SMA'] = ta.trend.sma_indicator(close_prices, window=sma_period)
        pivot_data[f'{company}_EMA'] = ta.trend.ema_indicator(close_prices, window=ema_period)
        pivot_data[f'{company}_RSI'] = ta.momentum.rsi(close_prices, window=rsi_period)

        macd = ta.trend.MACD(close_prices)
        pivot_data[f'{company}_MACD'] = macd.macd()
        pivot_data[f'{company}_MACD_signal'] = macd.macd_signal()
        pivot_data[f'{company}_MACD_hist'] = macd.macd_diff()

        company_data = stock_data[stock_data['Company'] == company].set_index('Date').sort_index()
        if not company_data.empty and len(company_data) >= atr_period:
            try:
                atr_indicator = ta.volatility.AverageTrueRange(
                    high=company_data['High'],
                    low=company_data['Low'],
                    close=company_data['Close'],
                    window=atr_period
                )
                atr_series = atr_indicator.average_true_range()
                atr_series = atr_series.reindex(pivot_data.index, method='ffill')
                atr_pivot[f'{company}_ATR'] = atr_series
            except Exception as e:
                atr_pivot[f'{company}_ATR'] = pd.Series([None] * len(pivot_data.index), index=pivot_data.index)
        else:
            atr_pivot[f'{company}_ATR'] = pd.Series([None] * len(pivot_data.index), index=pivot_data.index)

news_sentiment_hash = {}
cached_sentiment_date = None

def update_news_sentiment_hash():
    """Retrieve and cache news sentiment for all companies (past week)."""
    global news_sentiment_hash, cached_sentiment_date
    today_str = date.today().strftime("%Y-%m-%d")
    one_week_ago = datetime.now() - timedelta(days=7)
    temp_hash = {}
    for company in ai_companies:
        ticker = yf.Ticker(company)
        news_list = ticker.news
        sentiments = []
        for item in news_list:
            publish_ts = item.get('providerPublishTime')
            if publish_ts:
                publish_dt = datetime.fromtimestamp(publish_ts)
                if publish_dt >= one_week_ago:

                    text = item.get('title', '') or item.get('summary', '')
                    if text:
                        sentiment_score = analyzer.polarity_scores(text)['compound']
                        sentiments.append(sentiment_score)
        if sentiments:
            avg_sentiment = sum(sentiments) / len(sentiments)
        else:
            avg_sentiment = 0.0
        temp_hash[company] = avg_sentiment
    news_sentiment_hash = temp_hash
    cached_sentiment_date = today_str

def get_news_sentiment(company):
    """Return cached sentiment for the given company. Update cache if needed."""
    global cached_sentiment_date
    today_str = date.today().strftime("%Y-%m-%d")
    if cached_sentiment_date != today_str:
        update_news_sentiment_hash()
    return news_sentiment_hash.get(company, 0.0)

def get_open_source_news_summaries(company, top_n=5):
    """
    Retrieve top N news summaries using Google News RSS feed.
    Uses 'company + stock' as query.
    """
    url = f"https://news.google.com/rss/search?q={company}+stock"
    feed = feedparser.parse(url)
    entries = feed.entries
    sorted_entries = sorted(entries, key=lambda x: x.get('published_parsed', 0), reverse=True)
    results = []
    for entry in sorted_entries[:top_n]:
        summary_text = entry.get('summary', '')
        if summary_text.strip().lower().startswith('<a '):
            summary_text = entry.get('title', '')
        if not summary_text:
            summary_text = "No summary available."
        summary_text = BeautifulSoup(summary_text, "html.parser").get_text()
        sentences = summary_text.split('.')
        sentences = [s.strip() for s in sentences if s.strip()]
        short_summary = '. '.join(sentences[:2])
        if short_summary:
            short_summary += '.'
        else:
            short_summary = "No summary available."
        results.append(short_summary)
    return results

def get_top_news_summaries(company, top_n=5):
    """
    Return top N recent news summaries for the given company.
    First attempts using yfinance ticker.news; if insufficient,
    falls back to open source news integration via Google News RSS.
    """
    ticker = yf.Ticker(company)
    news_list = ticker.news
    summaries = []
    if news_list:
        sorted_news = sorted(news_list, key=lambda x: x.get('providerPublishTime', 0), reverse=True)
        for item in sorted_news[:top_n]:
            summary_text = item.get('summary', '')
            if not summary_text or summary_text.strip().lower().startswith('<a '):
                summary_text = item.get('title', '')
            if not summary_text:
                summary_text = "No summary available."
            summary_text = BeautifulSoup(summary_text, "html.parser").get_text()
            sentences = summary_text.split('.')
            sentences = [s.strip() for s in sentences if s.strip()]
            short_summary = '. '.join(sentences[:2])
            if short_summary:
                short_summary += '.'
            else:
                short_summary = "No summary available."
            summaries.append(short_summary)
    if not summaries or all(s == "No summary available." for s in summaries):
        summaries = get_open_source_news_summaries(company, top_n)
    return summaries

company_widget = widgets.Dropdown(
    options=ai_companies,
    value='NVDA',
    description='Company:'
)

start_widget = widgets.DatePicker(
    description='Start Date',
    value=pd.to_datetime('2023-01-01')
)

end_widget = widgets.DatePicker(
    description='End Date',
    value=pd.to_datetime(pd.Timestamp.today())
)

def plot_stock(company, start, end):
    start = pd.to_datetime(start)
    end = pd.to_datetime(end)
    filtered_data = pivot_data.loc[(pivot_data.index >= start) & (pivot_data.index <= end)]
    filtered_atr = atr_pivot.loc[(atr_pivot.index >= start) & (atr_pivot.index <= end)]

    if filtered_data.empty:
        print(f"No data available for {company} from {start.date()} to {end.date()}")
        return
    latest = filtered_data.iloc[-1]
    rsi = float(latest[f'{company}_RSI'])
    macd_line = float(latest[f'{company}_MACD'])
    macd_signal = float(latest[f'{company}_MACD_signal'])
    if (macd_line > macd_signal) and (rsi < 40):
        decision = "Buy"
    elif (macd_line < macd_signal) and (rsi > 60):
        decision = "Sell"
    else:
        decision = "Hold"
    sentiment = get_news_sentiment(company)
    sentiment_text = f"News Sentiment: {sentiment:+.2f}"

    plt.style.use('dark_background')
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(15, 16), sharex=True,
                                         gridspec_kw={'height_ratios': [3, 1, 1]})
    ax1.plot(filtered_data.index, filtered_data[company], label=f'{company} Close Price', linewidth=2)
    ax1.plot(filtered_data.index, filtered_data[f'{company}_SMA'], label='SMA 50', linewidth=2)
    ax1.plot(filtered_data.index, filtered_data[f'{company}_EMA'], label='EMA 20', linewidth=2)
    ax1.plot(filtered_data.index, filtered_data[f'{company}_RSI'], label='RSI', linewidth=2)
    ax1.axhline(y=70, linestyle='--', linewidth=1.5, label='RSI Overbought (70)')
    ax1.axhline(y=30, linestyle='--', linewidth=1.5, label='RSI Oversold (30)')
    ax1.text(0.80, 0.95, f"Signal: {decision}\n{sentiment_text}", transform=ax1.transAxes, fontsize=14,
             bbox=dict(facecolor='black', alpha=0.7), color='white')

    ax1.set_title(f'{company} - Technical Indicators & Weekly News Sentiment', fontsize=16)
    ax1.set_ylabel('Price / RSI', fontsize=12)
    ax1.legend(facecolor='black', framealpha=1, fontsize=10)
    ax1.grid(color='#333333', linestyle='--', linewidth=0.5)
    lines = ax1.get_lines()
    cursor = mplcursors.cursor(lines, hover=True)
    cursor.connect("add", lambda sel: sel.annotation.set_text(
        f"{sel.artist.get_label()}\nDate: {filtered_data.index[sel.index].date()}\nValue: {sel.target[1]:.2f}")
    )
    ax2.plot(filtered_data.index, filtered_data[f'{company}_MACD'], label='MACD', linewidth=2)
    ax2.plot(filtered_data.index, filtered_data[f'{company}_MACD_signal'], label='Signal', linewidth=2)
    ax2.bar(filtered_data.index, filtered_data[f'{company}_MACD_hist'], label='Histogram', alpha=0.7)

    ax2.set_title('MACD Indicator', fontsize=14)
    ax2.set_ylabel('MACD', fontsize=12)
    ax2.legend(facecolor='black', framealpha=1, fontsize=10)
    ax2.grid(color='#333333', linestyle='--', linewidth=0.5)
    ax3.plot(filtered_atr.index, filtered_atr[f'{company}_ATR'], label='ATR', linewidth=2)
    ax3.set_title('ATR Indicator (Volatility)', fontsize=14)
    ax3.set_xlabel('Date', fontsize=12)
    ax3.set_ylabel('ATR', fontsize=12)
    ax3.legend(facecolor='black', framealpha=1, fontsize=10)
    ax3.grid(color='#333333', linestyle='--', linewidth=0.5)

    plt.tight_layout()
    plt.show()
    print(f"\nTop 5 Recent Summaries for {company}:")
    summaries = get_top_news_summaries(company, top_n=5)
    if not summaries:
        print("No recent news articles found.")
    else:
        for i, summary_text in enumerate(summaries, start=1):
            print(f"\n{i}. {summary_text}")

ui = widgets.HBox([company_widget, start_widget, end_widget])
out = widgets.interactive_output(plot_stock, {
    'company': company_widget,
    'start': start_widget,
    'end': end_widget
})

display(ui, out)